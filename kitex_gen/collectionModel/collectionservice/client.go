// Code generated by Kitex v0.3.1. DO NOT EDIT.

package collectionservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"searchengine3090ti/kitex_gen/collectionModel"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateCollection(ctx context.Context, Req *collectionModel.CreateColltRequest, callOptions ...callopt.Option) (r *collectionModel.CreateColltResponse, err error)
	GetCollection(ctx context.Context, Req *collectionModel.GetColltRequest, callOptions ...callopt.Option) (r *collectionModel.GetColltResponse, err error)
	MGetCollection(ctx context.Context, Req *collectionModel.MGetColltResquest, callOptions ...callopt.Option) (r *collectionModel.MGetColltResponse, err error)
	DeleteCollection(ctx context.Context, Req *collectionModel.DeleteColltRequest, callOptions ...callopt.Option) (r *collectionModel.DeleteColltResponse, err error)
	AddEntry(ctx context.Context, Req *collectionModel.AddEntryRequest, callOptions ...callopt.Option) (r *collectionModel.AddEntryResponse, err error)
	DeleteEntry(ctx context.Context, Req *collectionModel.DeleteEntryRequest, callOptions ...callopt.Option) (r *collectionModel.DeleteEntryResponse, err error)
	SetName(ctx context.Context, Req *collectionModel.SetNameRequest, callOptions ...callopt.Option) (r *collectionModel.SetNameResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCollectionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCollectionServiceClient struct {
	*kClient
}

func (p *kCollectionServiceClient) CreateCollection(ctx context.Context, Req *collectionModel.CreateColltRequest, callOptions ...callopt.Option) (r *collectionModel.CreateColltResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCollection(ctx, Req)
}

func (p *kCollectionServiceClient) GetCollection(ctx context.Context, Req *collectionModel.GetColltRequest, callOptions ...callopt.Option) (r *collectionModel.GetColltResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCollection(ctx, Req)
}

func (p *kCollectionServiceClient) MGetCollection(ctx context.Context, Req *collectionModel.MGetColltResquest, callOptions ...callopt.Option) (r *collectionModel.MGetColltResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MGetCollection(ctx, Req)
}

func (p *kCollectionServiceClient) DeleteCollection(ctx context.Context, Req *collectionModel.DeleteColltRequest, callOptions ...callopt.Option) (r *collectionModel.DeleteColltResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCollection(ctx, Req)
}

func (p *kCollectionServiceClient) AddEntry(ctx context.Context, Req *collectionModel.AddEntryRequest, callOptions ...callopt.Option) (r *collectionModel.AddEntryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddEntry(ctx, Req)
}

func (p *kCollectionServiceClient) DeleteEntry(ctx context.Context, Req *collectionModel.DeleteEntryRequest, callOptions ...callopt.Option) (r *collectionModel.DeleteEntryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteEntry(ctx, Req)
}

func (p *kCollectionServiceClient) SetName(ctx context.Context, Req *collectionModel.SetNameRequest, callOptions ...callopt.Option) (r *collectionModel.SetNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetName(ctx, Req)
}
